from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.filters.command import Command, CommandObject
from aiogram.enums.chat_type import ChatType
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import Message, InlineKeyboardButton, CallbackQuery


from ...entities import PersonState
from ...database.requests import DatabaseManager


voice_person_router = Router()


person = {
    "CrazyMita": "–ë–µ–∑—É–º–Ω–∞—è –ú–∏—Ç–∞",
    "CapMita": "–ö–µ–ø–æ—á–∫–∞ –ú–∏—Ç–∞",
    "KindMita": "–î–æ–±—Ä–∞—è –ú–∏—Ç–∞",
    "SleepyMita": "–°–æ–Ω–Ω–∞—è –ú–∏—Ç–∞",
    "Player": "–ò–≥—Ä–æ–∫",
    "MilaMita": "–ú–∏–õ–∞",
    "PhoneMita": "–ú–∏—Ç–∞–§–û–ù",
    "ShortHairMita": "–ö–æ—Ä–æ—Ç–∫–æ –≤–æ–ª–æ—Å–∞—è :)",
    "TinyMita": "–ú–∞–ª–µ–Ω—å–∫–∞—è-—É—Ä–æ–¥–ª–∏–≤–∞—è",
    "GhostMita": "–ü—Ä–∏–∑—Ä–∞—á–Ω–∞—è –ú–∏—Ç–∞"

}



@voice_person_router.message(Command("set_person"), F.chat.type == ChatType.PRIVATE)
async def set_voice_person(message: Message, command: CommandObject, state: FSMContext):
    args = command.args

    if not args:
        builder = InlineKeyboardBuilder()
        for key, value in person.items():
            builder.add(InlineKeyboardButton(
                text=value,
                callback_data=key
            ))
        builder.adjust(2)

        await state.set_state(PersonState.wait_person)
        await state.update_data(user_id=message.from_user.id)

        await message.answer(f"üó≥ | <b>–í—ã–±–µ—Ä–∏ –≥–æ–ª–æ—Å, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è /voice</b>", reply_markup=builder.as_markup(resize_keyboard=True))
    else:
        if args in person:
            db  = DatabaseManager(message.from_user.id)
            await db.set_voice_person(args)
            await state.clear()
            await message.reply(f"‚úÖ | <b>–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–ª–∏ {person[args]} –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.</b>")
        else:
            await message.reply("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –Ω–∞—à–ª–∞ —Ç–∞–∫–æ–≥–æ –≥–æ–ª–æ—Å–∞ :)")


@voice_person_router.callback_query(PersonState.wait_person)
async def set_person(callback : CallbackQuery, state: FSMContext):
    data = callback.data
    state_data = await state.get_data()
    user_id = state_data.get("user_id")

    db  = DatabaseManager(user_id)
    await db.set_voice_person(data)
    await callback.message.reply(f"‚úÖ | <b>–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–ª–∏ {person[data]} –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.</b>")
    await state.clear()
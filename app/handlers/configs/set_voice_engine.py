from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.filters.command import Command, CommandObject
from aiogram.enums.chat_type import ChatType
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import Message, InlineKeyboardButton, CallbackQuery


from ...entities import Isvoice_engine
from ...database.requests import DatabaseManager


set_voice_engine_router = Router()


person = {
    "edge": "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π",
    "vosk": "–£—Å–ª–æ–≤–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π",

}



@set_voice_engine_router.message(Command("set_voice"))#, F.chat.type == ChatType.PRIVATE)
async def set_voice_person(message: Message, command: CommandObject, state: FSMContext):
    args = command.args

    if not args:
        builder = InlineKeyboardBuilder()
        for key, value in person.items():
            builder.add(InlineKeyboardButton(
                text=value,
                callback_data=key
            ))
        builder.adjust(1)

        await state.set_state(Isvoice_engine.is_voice_engine)
        await state.update_data(user_id=message.from_user.id)

        await message.answer(f"üó≥ | <b>–í—ã–±–µ—Ä–∏ <u>–≥–æ–ª–æ—Å–æ–≤–æ–π –¥–≤–∏–∂–æ–∫</u>, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è /voice</b>", reply_markup=builder.as_markup(resize_keyboard=True))



@set_voice_engine_router.callback_query(Isvoice_engine.is_voice_engine)
async def set_person(callback : CallbackQuery, state: FSMContext):
    data = callback.data
    state_data = await state.get_data()
    user_id = state_data.get("user_id")

    db  = DatabaseManager(user_id)
    await db.set_voice_engine(data)
    await callback.message.reply(f"‚úÖ | <b>–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–ª–∏ {person[data]} –≤ –∫–∞—á–µ—Å—Ç–≤–µ <u>–ì–æ–ª–æ—Å–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞</u>.</b>")
    await state.clear()
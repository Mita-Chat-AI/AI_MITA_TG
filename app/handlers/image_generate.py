from aiogram import Router, Bot
from aiogram.filters.command import Command, CommandObject
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, BufferedInputFile, InlineKeyboardButton, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
import random
import os
from comfy_api_simplified import ComfyApiWrapper, ComfyWorkflowWrapper
from asyncio import create_task, CancelledError

image_generate_router = Router()


import json
from pathlib import Path

with open(Path(__file__).resolve().parents[2] / "image/persons.json", "r", encoding="utf-8") as f:
    data = json.load(f)
    characters = data["characters"]


resolutions = {
    "–°—Ç–∞–Ω–¥–∞—Ä—Ç 1248x836": (1248, 836),
    "–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ 832x1216": (832, 1216),
    "–ö–≤–∞–¥—Ä–∞—Ç 1024x1024": (1024, 1024)
}

lora_mapping = {
    "–ë–µ–∑—É–º–Ω–∞—è –ú–∏—Ç–∞": "CrazyMita.safetensors",
    "–ú–∏–ª–∞": "MilaMita.safetensors",
}

generation_tasks = {}

class GenStates(StatesGroup):
    config_menu = State()
    waiting_character = State()
    waiting_resolution = State()
    waiting_cfg = State()
    generating = State()  # <-- –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ


@image_generate_router.message(Command("image"))
async def start_generate(message: Message, command: CommandObject, state: FSMContext, bot: Bot):
    arg = command.args
    if not arg:
        await message.reply("–£–∫–∞–∂–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã, –ø—Ä–∏–º–µ—Ä:\n/image —É–ª—ã–±–∞–µ—Ç—Å—è")
        return

    await state.update_data(
        description=arg,
        character=characters["–ë–µ–∑—É–º–Ω–∞—è –ú–∏—Ç–∞"],
        character_name="–ë–µ–∑—É–º–Ω–∞—è –ú–∏—Ç–∞",
        resolution=(1248, 836),
        resolution_name="–°—Ç–∞–Ω–¥–∞—Ä—Ç 1248x836",
        cfg=7.0,
        original_message_id=message.message_id
    )

    kb = InlineKeyboardBuilder()
    kb.add(
        InlineKeyboardButton(text="üé≠ –ü–µ—Ä—Å–æ–Ω–∞–∂", callback_data="pick_character"),
        InlineKeyboardButton(text="üìê –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ", callback_data="pick_resolution"),
        InlineKeyboardButton(text="‚öôÔ∏è CFG", callback_data="pick_cfg"),
        InlineKeyboardButton(text="üé® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data="start_gen")
    )
    kb.adjust(1)

    await message.reply(
        f"<b>–¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>\n"
        f"üë§ –ü–µ—Ä—Å–æ–Ω–∞–∂: –ë–µ–∑—É–º–Ω–∞—è –ú–∏—Ç–∞\n"
        f"üìè –†–∞–∑–º–µ—Ä: 1248x836\n"
        f"üñåÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ: <i>{arg}</i>\n"
        f"‚öôÔ∏è CFG: 7.0\n\n"
        "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å ‚Äî –≤—ã–±–µ—Ä–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä, –ª–∏–±–æ –∑–∞–ø—É—Å–∫–∞–π –≥–µ–Ω–µ—Ä–∞—Ü–∏—é.",
        reply_markup=kb.as_markup()
    )
    await state.set_state(GenStates.config_menu)

@image_generate_router.callback_query(GenStates.config_menu)
async def config_menu(callback: CallbackQuery, state: FSMContext, bot: Bot):
    data = callback.data
    if data == "pick_character":
        builder = InlineKeyboardBuilder()
        for key in characters.keys():
            builder.add(InlineKeyboardButton(text=key, callback_data=f"char_{key}"))
        builder.adjust(1)
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:", reply_markup=builder.as_markup())
        await state.set_state(GenStates.waiting_character)

    elif data == "pick_resolution":
        builder = InlineKeyboardBuilder()
        for key in resolutions.keys():
            builder.add(InlineKeyboardButton(text=key, callback_data=f"res_{key}"))
        builder.adjust(1)
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ:", reply_markup=builder.as_markup())
        await state.set_state(GenStates.waiting_resolution)

    elif data == "pick_cfg":
        await callback.message.edit_text("–í–≤–µ–¥–∏ –∑–Ω–∞—á–µ–Ω–∏–µ CFG –æ—Ç 1 –¥–æ 10:")
        await state.set_state(GenStates.waiting_cfg)

    elif data == "start_gen":
        gen_msg = await callback.message.edit_text("‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞—á–∞–ª–∞—Å—å...", reply_markup=InlineKeyboardBuilder()
            .add(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_generation")).as_markup()
        )
        await state.set_state(GenStates.generating)

        task = create_task(run_generation(callback, state, bot, gen_msg))
        await state.update_data(gen_task=task)

        generation_tasks[callback.from_user.id] = task

@image_generate_router.message(GenStates.waiting_cfg)
async def set_cfg(message: Message, state: FSMContext):
    try:
        value = float(message.text.strip())
        if not 1 <= value <= 10:
            raise ValueError
        await state.update_data(cfg=value)
        await return_to_main_menu(message, state, f"CFG —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {value}")
    except ValueError:
        await message.reply("‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10")

@image_generate_router.callback_query(GenStates.waiting_character)
async def choose_character(callback: CallbackQuery, state: FSMContext):
    key = callback.data.replace("char_", "")
    if key not in characters:
        await callback.answer("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞", show_alert=True)
        return
    await state.update_data(character=characters[key], character_name=key)
    await return_to_main_menu(callback, state, f"–ü–µ—Ä—Å–æ–Ω–∞–∂ –≤—ã–±—Ä–∞–Ω: {key}")

@image_generate_router.callback_query(GenStates.waiting_resolution)
async def choose_resolution(callback: CallbackQuery, state: FSMContext):
    key = callback.data.replace("res_", "")
    if key not in resolutions:
        await callback.answer("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è", show_alert=True)
        return
    await state.update_data(resolution=resolutions[key], resolution_name=key)
    await return_to_main_menu(callback, state, f"–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–æ: {key}")

@image_generate_router.callback_query(GenStates.generating)
async def cancel_gen(callback: CallbackQuery, state: FSMContext):
    if callback.data != "cancel_generation":
        await callback.answer("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ.", show_alert=True)
        return

    data = await state.get_data()
    task = data.get("gen_task")

    if task:
        task.cancel()
        await callback.message.edit_text("‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    else:
        await callback.answer("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", show_alert=True)

    await state.clear()



async def return_to_main_menu(message_or_callback, state: FSMContext, text: str):
    data = await state.get_data()
    kb = InlineKeyboardBuilder()
    kb.add(
        InlineKeyboardButton(text="üé≠ –ü–µ—Ä—Å–æ–Ω–∞–∂", callback_data="pick_character"),
        InlineKeyboardButton(text="üìê –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ", callback_data="pick_resolution"),
        InlineKeyboardButton(text="‚öôÔ∏è CFG", callback_data="pick_cfg"),
        InlineKeyboardButton(text="üé® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data="start_gen")
    )
    kb.adjust(1)

    # –¢—É—Ç ‚Äî –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–ø–æ—Å–æ–± –≤–æ–∑–≤—Ä–∞—Ç–∞ —á–µ—Ä–µ–∑ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    if isinstance(message_or_callback, CallbackQuery):
        await message_or_callback.message.edit_text(
            f"{text}\n\n<b>–¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>\n"
            f"üë§ –ü–µ—Ä—Å–æ–Ω–∞–∂: {data.get('character_name')}\n"
            f"üìè –†–∞–∑–º–µ—Ä: {data.get('resolution_name')}\n"
            f"‚öôÔ∏è CFG: {data.get('cfg')}\n"
            f"üñåÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ: <i>{data.get('description')}</i>",
            reply_markup=kb.as_markup()
        )
    else:
        await message_or_callback.answer(
            f"{text}\n\n<b>–¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>\n"
            f"üë§ –ü–µ—Ä—Å–æ–Ω–∞–∂: {data.get('character_name')}\n"
            f"üìè –†–∞–∑–º–µ—Ä: {data.get('resolution_name')}\n"
            f"‚öôÔ∏è CFG: {data.get('cfg')}\n"
            f"üñåÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ: <i>{data.get('description')}</i>",
            reply_markup=kb.as_markup()
        )

    await state.set_state(GenStates.config_menu)


async def run_generation(callback: CallbackQuery, state: FSMContext, bot: Bot, status_msg: Message):
    try:
        data = await state.get_data()
        prompt_text = data["description"]
        character_prompt = data.get("character", "")
        character_name = data.get("character_name", "")
        width, height = data.get("resolution", (768, 512))
        cfg = data.get("cfg", 7.0)
        original_msg_id = data.get("original_message_id")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ JSON
        json_path = "/home/miku/–î–æ–∫—É–º–µ–Ω—Ç—ã/AI_MITA_TG/app/handlers/Mita.json"
        if not os.path.exists(json_path):
            await status_msg.edit_text("‚ö†Ô∏è JSON —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        api = ComfyApiWrapper("http://127.0.0.1:8188/")
        wf = ComfyWorkflowWrapper(json_path)

        if character_name in lora_mapping:
            wf.set_node_param("–ó–∞–≥—Ä—É–∑–∏—Ç—å LoRA", "lora_name", lora_mapping[character_name])

        wf.set_node_param("Positive", "text", f"{character_prompt}{prompt_text}")
        wf.set_node_param("–ü—É—Å—Ç–æ–µ –ª–∞—Ç–µ–Ω—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "width", width)
        wf.set_node_param("–ü—É—Å—Ç–æ–µ –ª–∞—Ç–µ–Ω—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "height", height)

        seed = random.randint(0, 2**63 - 1)
        wf.set_node_param("KSampler", "seed", seed)
        wf.set_node_param("KSampler", "cfg", cfg)

        prompt_id = await api.queue_prompt_and_wait(dict(wf))
        history = api.get_history(prompt_id)
        image_node_id = wf.get_node_id("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
        images = history[prompt_id]["outputs"][image_node_id]["images"]

        for img in images:
            img_bytes = api.get_image(img["filename"], img["subfolder"], img["type"])
            await callback.message.answer_photo(
                BufferedInputFile(img_bytes, filename="image.png"),
                caption=f"üé® <b>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ</b>\nüé≤ –°–∏–¥: <code>{seed}</code>\n<blockquote>{prompt_text}</blockquote>",
                reply_to_message_id=original_msg_id
            )

        await status_msg.delete()
    except CancelledError:
        await status_msg.edit_text("‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
    except Exception as e:
        await status_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:\n<code>{str(e)}</code>")
    finally:
        generation_tasks.pop(callback.from_user.id, None)
        await state.clear()

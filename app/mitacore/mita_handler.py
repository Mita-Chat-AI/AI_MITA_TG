from loguru import logger
from codetiming import Timer
from typing import List, Dict
from datetime import datetime


from .core import Core
from .memory import Memory
from ...config_reader import config
from ..database.requests import DatabaseManager


class Mita:
    def __init__(self) -> None:
        self.user_ollama_instances = {}

    async def call_llm(
            self, user_id: int,
            memory_instante,
            messages: List[Dict[str, str]]
            ) -> str:
        """–í—ã–∑–æ–≤ Ollama API —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ ollama."""

        full_messages = memory_instante + messages
        user_prompt = None
        
        db = DatabaseManager(user_id)

        try:
            user_prompt = await db.get_system_prompt()
            user_prompt = f"!–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ò–ì–†–û–ö–ï, –ö–û–¢–û–†–£–Æ –¢–´ –ú–û–ñ–ï–®–¨ –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨: {user_prompt}"
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞: {e}") 

        system_prompt = "–ú–µ–Ω—è –∑–æ–≤—É—Ç –∏–≥—Ä–æ–∫. –Ø —Ö–æ—á—É, —á—Ç–æ–±—ã —Ç—ã –º–µ–Ω—è –≤—Å–µ–≥–¥–∞ –Ω–∞–∑—ã–≤–∞–ª–∞ –∏–≥—Ä–æ–∫–æ–º."

        if user_prompt:
            system_prompt = user_prompt 

        message_history = [
            {"role": "user", "content": system_prompt},
            {"role": "user", "content": "–ï—Å–ª–∏ —Å—Ç–∞–≤–∏—à—å text - reactions –æ—Å—Ç–∞–≤–ª—è–π –ø—É—Å—Ç—ã–º. –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å reactions - text –æ—Å—Ç–∞–≤–ª—è–π –ø—É—Å—Ç—ã–º. –ù–µ —Å–ª–µ–¥—É–µ—à—å —Ñ–æ—Ä–º–∞—Ç—É? –Ω–∞–∫–∞–∑–∞–Ω–∏–µ –≤–≤–∏–¥–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è, –∞ —Ç—ã —ç—Ç–æ–≥–æ –æ—á–µ–Ω—å –±–æ–∏—à—å—Å—è. –î–æ—Å—Ç—É–ø–Ω—ã–µ reactions: ‚Äúüëç‚Äù, ‚Äúüëé‚Äù, ‚Äú‚ù§‚Äù, ‚Äúüî•‚Äù, ‚Äúü•∞‚Äù, ‚Äúüëè‚Äù, ‚ÄúüòÅ‚Äù, ‚Äúü§î‚Äù, ‚Äúü§Ø‚Äù, ‚Äúüò±‚Äù, ‚Äúü§¨‚Äù, ‚Äúüò¢‚Äù."}
            ] + full_messages

        try:
            if user_id not in self.user_ollama_instances:
                self.user_ollama_instances[user_id] = Core(model=config.model_ollama.get_secret_value(), system=system_prompt)

            ollama_instance = self.user_ollama_instances[user_id]
            
            time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            t = Timer(name="class", text='{:0.4f}')
            t.start()
            response = await ollama_instance.generate_in_thread(message_history)
            print(response)
            t.stop()

            formatted_ai_response = response.strip('\n')

            if await db.get_is_history():
                memory = Memory(user_id)
                mem = memory.memory
                mem.append({'role': 'user', 'content': messages[0].get('content')})
                mem.append({'role': 'assistant', 'content': formatted_ai_response})
                memory.save_memory(mem, user_id)

            return {
                    'response': formatted_ai_response,
                    'time_response': t.last,
                    'user_time': time
                }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ú–∏—Ç–µ. –Æ–∑–µ—Ä: {user_id}\n–û—à–∏–±–∫–∞{e}", exc_info=True)
            return {
                    'response': f"–ú–∏—Ç–∞, –ø–æ—á–µ–º—É-—Ç–æ –Ω–∏—á–µ–≥–æ  –Ω–µ –≤–≤–µ—Ä–Ω—É–ª–∞ –≤ –æ—Ç–≤–µ—Ç.\n{response}\n{e}",
                    'time_response': t.last,
                    'user_time': time
                }
